{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","condition","list","sameName","bind","assertThisInitialized","diffloc","handleUploadImage","ev","_this2","preventDefault","data","FormData","append","uploadInput","files","fetch","method","body","then","res","json","console","log","setState","catch","error","e","_this3","name","document","getElementById","options","selectedIndex","text","JSON","stringify","label","innerHTML","node","createElement","textnode","createTextNode","length","appendChild","_this4","react_default","a","className","onSubmit","ref","type","id","selected","disabled","hidden","value","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAsIeA,qBAnIb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,UAAW,EACXC,KAAM,IAERT,EAAKU,SAAWV,EAAKU,SAASC,KAAdV,OAAAW,EAAA,EAAAX,CAAAD,IAChBA,EAAKa,QAAUb,EAAKa,QAAQF,KAAbV,OAAAW,EAAA,EAAAX,CAAAD,IACfA,EAAKc,kBAAoBd,EAAKc,kBAAkBH,KAAvBV,OAAAW,EAAA,EAAAX,CAAAD,IATRA,iFAYDe,GAAI,IAAAC,EAAAb,KACpBY,EAAGE,iBACH,IAAMC,EAAO,IAAIC,SACjBD,EAAKE,OAAO,OAAQjB,KAAKkB,YAAYC,MAAM,IAE3CC,MAAM,8CAA+C,CACnDC,OAAQ,OACRC,KAAMP,IAELQ,KAAK,SAAAC,GACJ,OAAOA,EAAIC,SAEZF,KAAK,SAAAR,GACJW,QAAQC,IAAIZ,GACZF,EAAKe,SAAS,CAAEtB,KAAMS,EAAKT,KAAMD,UAAWU,EAAKV,cAChDwB,MAAM,SAACC,GACRJ,QAAQC,IAAIG,qCAIVC,GAAG,IAAAC,EAAAhC,KACT+B,EAAEjB,iBACF,IAEIC,EAAO,CACTkB,MAHEF,EAAIG,SAASC,eAAe,cAClBC,QAAQL,EAAEM,eAAeC,MAIvClB,MAAM,sDAAuD,CAC3DC,OAAQ,OACRC,KAAMiB,KAAKC,UAAUzB,KAEpBQ,KAAK,SAAAC,GACJ,OAAOA,EAAIC,SAEZF,KAAK,SAAAR,GACJW,QAAQC,IAAIZ,GACZiB,EAAKJ,SAAS,CAAEtB,KAAMS,EAAKT,KAAMD,UAAWU,EAAKV,cAChDwB,MAAM,SAACC,GACRJ,QAAQC,IAAIG,wCAIhB,IAAIC,EAAIG,SAASC,eAAe,YAC5BM,EAAQV,EAAEK,QAAQL,EAAEM,eAAeC,KACvCJ,SAASC,eAAe,YAAYO,UAAY,GAChD,IAAIC,EAAOT,SAASU,cAAc,MAC9BC,EAAWX,SAASY,eAAe,eAAiB9C,KAAKI,MAAME,KAAKN,KAAKI,MAAME,KAAKyC,OAAO,GAAK,KAAON,GAC3GE,EAAKK,YAAYH,GACjBX,SAASC,eAAe,YAAYa,YAAYL,oCAGzC,IAAAM,EAAAjD,KACP,OACEkD,EAAAC,EAAAP,cAAA,OAAKQ,UAAU,aACbF,EAAAC,EAAAP,cAAA,OAAKQ,UAAU,eACbF,EAAAC,EAAAP,cAAA,gCAEFM,EAAAC,EAAAP,cAAA,WACAM,EAAAC,EAAAP,cAAA,OAAKQ,UAAU,OACbF,EAAAC,EAAAP,cAAA,QAAMS,SAAUrD,KAAKW,mBACnBuC,EAAAC,EAAAP,cAAA,SACEU,IAAK,SAAAA,GACHL,EAAK/B,YAAcoC,GAErBC,KAAK,SAEPL,EAAAC,EAAAP,cAAA,UAAQW,KAAK,UAAb,YAKqB,GAAxBvD,KAAKI,MAAMC,WACV6C,EAAAC,EAAAP,cAAA,OAAKQ,UAAU,gBACbF,EAAAC,EAAAP,cAAA,yBACe5C,KAAKI,MAAME,KAAK,GAD/B,oBACoD,IACjDN,KAAKI,MAAME,KAAK,GAAI,MAIF,GAAxBN,KAAKI,MAAMC,WACV6C,EAAAC,EAAAP,cAAA,OAAKQ,UAAU,eAAeI,GAAG,YAC/BN,EAAAC,EAAAP,cAAA,6DACAM,EAAAC,EAAAP,cAAA,YACEM,EAAAC,EAAAP,cAAA,UAAQY,GAAG,YACTN,EAAAC,EAAAP,cAAA,UAAQa,UAAQ,EAACC,UAAQ,EAACC,QAAM,GAAhC,eAGAT,EAAAC,EAAAP,cAAA,UAAQgB,MAAM,KAAK5D,KAAKI,MAAME,KAAK,IACnC4C,EAAAC,EAAAP,cAAA,UAAQgB,MAAM,KAAK5D,KAAKI,MAAME,KAAK,KAErC4C,EAAAC,EAAAP,cAAA,UAAQW,KAAK,SAASM,QAAS7D,KAAKO,UAApC,YAMmB,GAAxBP,KAAKI,MAAMC,WACV6C,EAAAC,EAAAP,cAAA,OAAKQ,UAAU,YACbF,EAAAC,EAAAP,cAAA,iCACAM,EAAAC,EAAAP,cAAA,2CACAM,EAAAC,EAAAP,cAAA,YACEM,EAAAC,EAAAP,cAAA,UAAQY,GAAG,aACTN,EAAAC,EAAAP,cAAA,UAAQa,UAAQ,EAACC,UAAQ,EAACC,QAAM,GAAhC,eAGAT,EAAAC,EAAAP,cAAA,UAAQgB,MAAM,KAAK5D,KAAKI,MAAME,KAAK,IACnC4C,EAAAC,EAAAP,cAAA,UAAQgB,MAAM,KAAK5D,KAAKI,MAAME,KAAK,KAErC4C,EAAAC,EAAAP,cAAA,UAAQW,KAAK,SAASM,QAAS7D,KAAKU,SAApC,oBAzHIoD,IAAMC,YCUJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAP,cAAC2B,EAAD,MAASrC,SAASC,eAAe,SD2H3C,kBAAmBqC,WACrBA,UAAUC,cAAcC,MAAMnD,KAAK,SAAAoD,GACjCA,EAAaC","file":"js/main.5bb2d9e9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      condition: 0,\n      list: []\n    };\n    this.sameName = this.sameName.bind(this);\n    this.diffloc = this.diffloc.bind(this);\n    this.handleUploadImage = this.handleUploadImage.bind(this);\n  }\n\n  handleUploadImage(ev) {\n    ev.preventDefault();\n    const data = new FormData();\n    data.append(\"file\", this.uploadInput.files[0]);\n\n    fetch(\"https://find-locations.herokuapp.com/upload\", {\n      method: \"POST\",\n      body: data\n    })\n      .then(res => {\n        return res.json();\n      })\n      .then(data => {\n        console.log(data);\n        this.setState({ list: data.list, condition: data.condition });\n      }).catch((error) => {\n        console.log(error);\n      });\n  }\n\n  diffloc(e) {\n    e.preventDefault();\n    var e = document.getElementById(\"myselects\");\n    var label = e.options[e.selectedIndex].text;\n    var data = {\n      name: label\n    };\n    fetch(\"https://find-locations.herokuapp.com/upload/diffloc\", {\n      method: \"POST\",\n      body: JSON.stringify(data)\n    })\n      .then(res => {\n        return res.json();\n      })\n      .then(data => {\n        console.log(data);\n        this.setState({ list: data.list, condition: data.condition });\n      }).catch((error) => {\n        console.log(error);\n      });\n  }\n  sameName() {\n    var e = document.getElementById(\"myselect\");\n    var label = e.options[e.selectedIndex].text;\n    document.getElementById(\"samename\").innerHTML = \"\";\n    var node = document.createElement(\"h1\");\n    var textnode = document.createTextNode(\"You live in \" + this.state.list[this.state.list.length-1] + \", \" + label);\n    node.appendChild(textnode);\n    document.getElementById(\"samename\").appendChild(node);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row heading\">\n          <h1> Location Finder </h1>\n        </div>\n        <br />\n        <div className=\"row\">\n          <form onSubmit={this.handleUploadImage}>\n            <input\n              ref={ref => {\n                this.uploadInput = ref;\n              }}\n              type=\"file\"\n            />\n            <button type=\"submit\">Upload</button>\n          </form>\n        </div>\n        {/* Conditional Rendering begins */}\n\n        {this.state.condition == 1 && (\n          <div className=\"row heading2\">\n            <h1>\n              You live in {this.state.list[0]} and in the state{\" \"}\n              {this.state.list[1]}{\" \"}\n            </h1>\n          </div>\n        )}\n        {this.state.condition == 2 && (\n          <div className=\"row heading2\" id=\"samename\">\n            <h1>Which state among the following do you live in?</h1>\n            <form>\n              <select id=\"myselect\">\n                <option selected disabled hidden>\n                  Choose here\n                </option>\n                <option value=\"1\">{this.state.list[0]}</option>\n                <option value=\"2\">{this.state.list[1]}</option>\n              </select>\n              <button type=\"button\" onClick={this.sameName}>\n                Submit\n              </button>\n            </form>\n          </div>\n        )}\n        {this.state.condition == 3 && (\n          <div className=\"heading2\">\n            <h1>I got two locations</h1>\n            <p>Where do you live among these?</p>\n            <form>\n              <select id=\"myselects\">\n                <option selected disabled hidden>\n                  Choose here\n                </option>\n                <option value=\"1\">{this.state.list[0]}</option>\n                <option value=\"2\">{this.state.list[1]}</option>\n              </select>\n              <button type=\"button\" onClick={this.diffloc}>\n                Submit\n              </button>\n            </form>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}