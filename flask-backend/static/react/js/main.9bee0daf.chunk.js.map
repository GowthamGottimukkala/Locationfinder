{"version":3,"sources":["maps.js","ShowonMap.js","App.js","serviceWorker.js","index.js"],"names":["Map","react_default","a","createElement","style","height","width","google_map_react_lib_default","bootstrapURLKeys","key","defaultCenter","lat","this","props","lng","defaultZoom","Component","ShowonMap","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_this2","Geocode","setApiKey","enableDebug","fromAddress","place","then","response","_response$results$0$g","results","geometry","location","setState","error","console","log","className","maps","App","condition","list","sameName","bind","assertThisInitialized","diffloc","handleUploadImage","ev","preventDefault","data","FormData","append","uploadInput","files","fetch","method","body","res","json","catch","e","_this3","name","document","getElementById","options","selectedIndex","text","JSON","stringify","label","innerHTML","node","textnode","createTextNode","length","appendChild","_this4","onSubmit","ref","type","src_ShowonMap","id","selected","disabled","hidden","value","onClick","React","Boolean","window","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"js/main.9bee0daf.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport GoogleMapReact from 'google-map-react';\n\nclass Map extends Component{\n    render(){\n        return(\n            <div style={{height:'1000px',width:'1000px'}}>\n                <GoogleMapReact bootstrapURLKeys={{ key:'AIzaSyCLXUeNBnr-U_526lUfTfpPFg6Y6h9ogg4' }} defaultCenter={{lat:this.props.lat,lng:this.props.lng}} defaultZoom={14} />\n            </div>\n        );\n    }\n}\n\nexport default Map;","import React,{ Component } from 'react';\nimport Geocode from 'react-geocode';\nimport Map from './maps';\n\n\nclass ShowonMap extends Component{\n\n    constructor(){\n        super();\n        this.state={\n            lat:0,\n            lng:0,\n        };\n    }\n\n    render(){\n        Geocode.setApiKey('AIzaSyCLXUeNBnr-U_526lUfTfpPFg6Y6h9ogg4');\n        Geocode.enableDebug();\n        Geocode.fromAddress(this.props.place).then(response => {\n            const { lat, lng } = response.results[0].geometry.location;\n            this.setState({\n                lat:lat,\n                lng:lng,\n            });\n        },error => {\n            console.error(error);\n        });\n        console.log(this.state.lat,this.state.lng)\n\n        return(\n            <div className=\"grid\">\n                <Map lat={this.state.lat} lng={this.state.lng} />\n            </div>\n        );\n    }\n}\n\nexport default ShowonMap;","import React from \"react\";\nimport \"./App.css\";\nimport ShowonMap from \"./ShowonMap\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      condition: 0,\n      list: []\n    };\n    this.sameName = this.sameName.bind(this);\n    this.diffloc = this.diffloc.bind(this);\n    this.handleUploadImage = this.handleUploadImage.bind(this);\n  }\n\n  handleUploadImage(ev) {\n    ev.preventDefault();\n    const data = new FormData();\n    data.append(\"file\", this.uploadInput.files[0]);\n\n    fetch(\"https://find-locations.herokuapp.com/upload\", {\n      method: \"POST\",\n      body: data\n    })\n      .then(res => {\n        return res.json();\n      })\n      .then(data => {\n        console.log(data);\n        this.setState({ list: data.list, condition: data.condition });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  diffloc(e) {\n    e.preventDefault();\n    var e = document.getElementById(\"myselects\");\n    var label = e.options[e.selectedIndex].text;\n    var data = {\n      name: label\n    };\n    fetch(\"https://find-locations.herokuapp.com/upload/diffloc\", {\n      method: \"POST\",\n      body: JSON.stringify(data)\n    })\n      .then(res => {\n        return res.json();\n      })\n      .then(data => {\n        console.log(data);\n        this.setState({ list: data.list, condition: data.condition });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n  sameName() {\n    var e = document.getElementById(\"myselect\");\n    var label = e.options[e.selectedIndex].text;\n    document.getElementById(\"samename\").innerHTML = \"\";\n    var node = document.createElement(\"h1\");\n    var textnode = document.createTextNode(\n      \"You live in \" +\n        this.state.list[this.state.list.length - 1] +\n        \", \" +\n        label\n    );\n    node.appendChild(textnode);\n    document.getElementById(\"samename\").appendChild(node);\n  }\n\n  render() {\n    // var newDiv = document.createElement(\"div\");\n    // var selectHTML = \"\";\n    // selectHTML = \"<select id=myselect\";\n    // selectHTML += \"<option selected disabled hidden>Choose here</option>\"\n    // var i;\n    // for (i = 0; i < this.state.list.length; i = i + 1) {\n    //   selectHTML +=\n    //     \"<option value='\" + i + \"'>\" + this.state.list[i] + \"</option>\";\n    // }\n    // selectHTML += \"</select>\";\n    // selectHTML += '<button type=\"button\" onClick={this.sameName}>Submit</button>'\n    // newDiv.innerHTML = selectHTML;\n    // document.getElementById(\"samename\").appendChild(newDiv);\n\n    return (\n      <div className=\"container\">\n        <div className=\"row heading\">\n          <h1> Location Finder </h1>\n        </div>\n        <br />\n        <div className=\"row\">\n          <form onSubmit={this.handleUploadImage}>\n            <input\n              ref={ref => {\n                this.uploadInput = ref;\n              }}\n              type=\"file\"\n            />\n            <button type=\"submit\">Upload</button>\n          </form>\n        </div>\n        {/* Conditional Rendering begins */}\n\n        {this.state.condition == 1 && (\n          <div className=\"row heading2\">\n            <h1>\n              You live in {this.state.list[0]} and in the state{\" \"}\n              {this.state.list[1]}{\" \"}\n            </h1>\n            <div className=\"marked\">\n              <ShowonMap place={this.state.list[0]} />\n            </div>\n          </div>\n        )}\n        {this.state.condition == 2 && (\n          <div className=\"row heading2\" id=\"samename\">\n            <h1>Which state among the following do you live in?</h1>\n           <form id=\"mine\">\n               <select id=\"myselect\">\n                <option selected disabled hidden>\n                  Choose here\n                </option>\n                <option value=\"1\">{this.state.list[0]}</option>\n                <option value=\"2\">{this.state.list[1]}</option>\n              </select> \n              <button type=\"button\" onClick={this.sameName}>\n                Submit\n              </button>\n            </form>\n          </div>\n        )}\n        {this.state.condition == 3 && (\n          <div className=\"heading2\">\n            <h1>I got two locations</h1>\n            <p>Where do you live among these?</p>\n            <form>\n              <select id=\"myselects\">\n                <option selected disabled hidden>\n                  Choose here\n                </option>\n                <option value=\"1\">{this.state.list[0]}</option>\n                <option value=\"2\">{this.state.list[1]}</option>\n              </select>\n              <button type=\"button\" onClick={this.diffloc}>\n                Submit\n              </button>\n            </form>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}